#!/bin/bash -u

NULLSHA="0000000000000000000000000000000000000000"
EMPTYTREESHA1=$(git hash-object -t tree /dev/null) # SHA1: "4b825dc642cb6eb9a060e54bf8d69288fbee4904"
EXIT=0

KEYNAME_GLOB='.wrapped-*-passphrase'

echo "[hook] Checking for invalid files"
while read oldref newref refname; do

    # Avoid removed branches
    if [ "${newref}" = "${NULLSHA}" ]; then
    continue
    fi

    # Set oldref properly if this is branch creation.
    if [ "${oldref}" = "${NULLSHA}" ]; then
    oldref=$EMPTYTREESHA1
    fi

    # Ignore case
    shopt -s nocaseglob

    newFiles=$(git diff --stat --name-only --diff-filter=ACMRT ${oldref}..${newref})

    if [[ $? -ne 0 ]]; then
    echo "[ERROR] Repository incosistency. Cancelling push..."
    exit 1;
    fi

    old_IFS=$IFS
    IFS='
    '
    for filename in $newFiles; do
        case "$filename" in
              (bin/*)                   ;;
              (hooks/*)                 ;;
              (ENCRYPTED_DATA/*)        ;;
              (README.md)               ;;
              (.gitignore)              ;;
              (.pre-commit-config.yaml) ;;
              ($KEYNAME_GLOB)
                                        echo "[WARN] [WARN] [WARN] [WARN] [WARN] [WARN] [WARN] [WARN]"
                                        echo "[WARN]"
                                        echo "[WARN] If the old key exists in your commit logs"
                                        echo "[WARN]  it can be used to decrypt everything anyway!"
                                        echo "[WARN]"
                                        echo "[WARN] If the old key is in someone's local copy"
                                        echo "[WARN]  it can be used to decrypt everything anyway!"
                                        echo "[WARN]"
                                        echo "[WARN] Changing the key password only works when the"
                                        echo "[WARN]  copies with the old password are all destroyed!"
                                        echo "[WARN]"
                                        echo "[WARN]       Git cannot really do that for you!"
                                        echo "[WARN]"
                                        echo "[WARN] [WARN] [WARN] [WARN] [WARN] [WARN] [WARN] [WARN]"
                                        ;;
              (*)
                                        echo "[ERROR] Unexpected filename detected in push: $filename"
                                        echo "[ERROR]    It could be unencrypted data... so blocking the push"
                                        EXIT=1
                                        ;;
        esac
    done
    IFS=$old_IFS
done

exit ${EXIT}
